{"version":3,"file":"static/js/2069.06ca98b7.chunk.js","mappings":"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","sources":["components/AppContent.js","components/Weather.js","pages/App.js"],"sourcesContent":["import \"./AppContent.css\";\n\nexport default function AppContent({ children }) {\n    return <div className=\"App-content\">{children}</div>;\n}\n","import { useLocalStorage, useMount } from \"react-use\";\nimport { fetchCity, fetchWeather, getGeo } from \"../utils\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport \"./Weather.css\";\nimport { pick } from \"lodash-es\";\nconst showKeys = [\n    [\"feelsLike\", \"体感温度\", \"℃\"],\n    [\"windDir\", \"风力等级\"],\n    [\"windSpeed\", \"风速\"],\n    [\"humidity\", \"相对湿度\"],\n    [\"precip\", \"累计降水量/h\", \"mm\"],\n    [\"pressure\", \"大气压强\", \"百帕\"],\n    [\"vis\", \"能见度\", \"公里\"],\n    [\"cloud\", \"云量\", \"%\"],\n];\nexport default function Weather() {\n    const [coordsLocal, setCoordsLocal] = useLocalStorage(\"coords\", null);\n    const [cityLocal, setCityLocal] = useLocalStorage(\"city\", null);\n    const [weatherLocal, setWeatherLocal] = useLocalStorage(\"weather\", null);\n    const [coords, setCoords] = useState(() => coordsLocal);\n    const [w, setW] = useState(() => weatherLocal);\n    const [c, setC] = useState(() => cityLocal);\n    const [show, setShow] = useState(() => {\n        return !!w;\n    });\n\n    const requestW = useCallback(async () => {\n        const {\n            data: { now, fxLink },\n        } = await fetchWeather(coords);\n        if (now) {\n            const _w = { ...now, link: fxLink };\n            setWeatherLocal(_w);\n            setW(_w);\n        }\n    }, [coords, setWeatherLocal]);\n\n    const requestC = useCallback(async () => {\n        const {\n            data: { location },\n        } = await fetchCity(coords);\n        if (location) {\n            setCityLocal(location[0]);\n            setC(location[0]);\n            setShow(true);\n        }\n    }, [coords, setCityLocal]);\n\n    useMount(async () => {\n        try {\n            const res = await getGeo();\n            if (res) {\n                setCoordsLocal(pick(res.coords, [\"latitude\", \"longitude\"]));\n                setCoords(res.coords);\n            }\n        } catch (error) {\n            setShow(false);\n        }\n    });\n\n    const request = useCallback(async () => {\n        await requestC();\n        await requestW();\n    }, [requestC, requestW]);\n\n    useEffect(() => {\n        if (coords) {\n            request();\n        }\n    }, [coords, request]);\n\n    const onRefresh = async () => {\n        const icon = document.querySelector(\".refreshW\");\n        if (icon) {\n            icon.classList.add(\"rotate\");\n        }\n        await request();\n        let t = setTimeout(() => {\n            if (icon) {\n                icon.classList.remove(\"rotate\");\n            }\n            clearTimeout(t);\n        }, 1000);\n    };\n\n    return (\n        <>\n            {show && w && (\n                <div className=\"weatherBox\">\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-between\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        <h2>今日天气</h2>\n                        <div style={{ fontSize: \"0.8rem\", color: \"#555050\" }}>\n                            天气服务由\n                            <a href=\"https://www.qweather.com\">和风天气</a>\n                            驱动\n                        </div>\n                    </div>\n                    <div style={{ fontSize: \"1rem\" }}>\n                        当前所在：{c.country}/{c.adm1}/{c.adm2}/{c.name}\n                    </div>\n                    <div className=\"w-icon\">\n                        <i\n                            className={`qi-${w.icon} icon`}\n                            style={{ fontSize: \"6rem\" }}\n                        ></i>\n                        <div className=\"w-infos\">\n                            <label className=\"temp\">{w.temp}</label>\n                            <label className=\"text\">{w.text}</label>\n                        </div>\n                    </div>\n                    <div className=\"infos\">\n                        {showKeys.map((item) => {\n                            const [key, field, unit] = item;\n                            return (\n                                <div key={key} className=\"item\">\n                                    <label className=\"field\"> {field}</label>\n                                    <label className=\"val\" data-unit={unit}>\n                                        {w[key]}\n                                    </label>\n                                </div>\n                            );\n                        })}\n                    </div>\n                    <span\n                        className=\"material-symbols-outlined refreshW\"\n                        style={{ float: \"right\", cursor: \"pointer\" }}\n                        onClick={onRefresh}\n                        title=\"刷新\"\n                    >\n                        refresh\n                    </span>\n                </div>\n            )}\n        </>\n    );\n}\n","import \"./App.css\";\nimport AppContent from \"../components/AppContent\";\nimport AppHeader from \"../components/AppHeader\";\nimport { Link } from \"react-router-dom\";\n\nimport { articles } from \"../articles\";\nimport Weather from \"../components/Weather\";\nimport { useTitle } from \"react-use\";\nconst filterFun = (item) => {\n    if (window.location.origin.includes(\"localhost\")) {\n        return true;\n    } else {\n        return !item.title.toLowerCase().includes(\"test\");\n    }\n};\nfunction App() {\n    useTitle(\"骇客地锅\");\n    return (\n        <div className=\"App\">\n            <AppHeader />\n            <AppContent>\n                <div className=\"widgets\">\n                    <Weather />\n                </div>\n                <div style={{ flex: 4, textAlign: \"center\" }}>\n                    {articles.filter(filterFun).map((item, idx) => {\n                        return (\n                            <div key={idx} className=\"linkcard\">\n                                <Link to={`/post/${item.id}`}>\n                                    <label\n                                        style={{\n                                            fontSize: \"1.2rem\",\n                                            cursor: \"pointer\",\n                                        }}\n                                    >\n                                        {item.title} —— {item.datetime}\n                                    </label>\n                                </Link>\n                            </div>\n                        );\n                    })}\n                </div>\n            </AppContent>\n        </div>\n    );\n}\n\nexport default App;\n"],"names":["AppContent","children","className","showKeys","Weather","useLocalStorage","coordsLocal","setCoordsLocal","cityLocal","setCityLocal","weatherLocal","setWeatherLocal","useState","coords","setCoords","w","setW","c","setC","show","setShow","requestW","useCallback","fetchWeather","data","now","fxLink","_w","link","requestC","fetchCity","location","useMount","getGeo","res","pick","request","useEffect","onRefresh","icon","document","querySelector","classList","add","t","setTimeout","remove","clearTimeout","style","display","justifyContent","alignItems","fontSize","color","href","country","adm1","adm2","name","temp","text","map","item","key","field","unit","float","cursor","onClick","title","filterFun","window","origin","includes","toLowerCase","useTitle","AppHeader","flex","textAlign","articles","idx","to","id","datetime"],"sourceRoot":""}