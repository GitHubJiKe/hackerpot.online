import { useRef, useState, useCallback } from "react";
import "./Quote.css";
import html2canvas from "html2canvas";
import { downloadImageByUrlAndName, getBgUrl } from "../utils";

function formatterQuote(text) {
    return text.replace(/\n/g, "<br/>");
}

function loadImage(url) {
    return new Promise(function (resolve, reject) {
        const img = new Image();
        img.crossOrigin = "anonymous";
        img.onload = function () {
            resolve(imageToBase64(img));
        };
        img.onerror = function () {
            reject(new Error("Failed to load image"));
        };
        img.src = url;
    });
}
function imageToBase64(img) {
    // 创建一个 Canvas 元素
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");

    // 设置 Canvas 元素的大小与图像大小相同
    canvas.width = img.width;
    canvas.height = img.height;

    // 在 Canvas 上绘制图像
    ctx.drawImage(img, 0, 0);

    // 将 Canvas 中的图像转换为 Base64 字符串
    const base64 = canvas.toDataURL("image/jpeg"); // 指定图片格式，如 'image/png' 或 'image/jpeg'

    return base64;
}
const useQuote = (initialQuote) => {
    const [quote, setQuote] = useState(initialQuote);
    const formattedQuote = useRef(formatterQuote(quote));

    const onQuoteChange = useCallback((e) => {
        const newQuote = e.currentTarget.value;
        setQuote(newQuote);
        formattedQuote.current = formatterQuote(newQuote);
    }, []);

    return { quote, onQuoteChange, formattedQuote };
};

const useBackground = (initialNum) => {
    const [num, setNum] = useState(initialNum);

    const updateNum = useCallback((direction) => {
        setNum((prevNum) => {
            if (direction === "left") {
                return prevNum === 1 ? 99 : prevNum - 1;
            } else {
                return prevNum === 99 ? 1 : prevNum + 1;
            }
        });
    }, []);

    const bgUrl = getBgUrl(num);

    return { bgUrl, updateNum };
};

export default function Quote() {
    const { quote, onQuoteChange, formattedQuote } =
        useQuote("这是一句特别不牛逼的话");
    const { bgUrl, updateNum } = useBackground(1);
    const eleRef = useRef();

    const onDownload = useCallback(() => {
        loadImage(bgUrl).then((img) => {
            eleRef.current.style.backgroundImage = `url(${img})`;
            html2canvas(eleRef.current, {
                useCORS: true,
                allowTaint: true,
            }).then((canvas) => {
                downloadImageByUrlAndName(
                    canvas.toDataURL("image/png"),
                    "quote.png",
                );
            });
        });
    }, [bgUrl]);

    return (
        <div className="quote">
            <div className="displayPane">
                <div
                    ref={eleRef}
                    className="quoteContentBox"
                    style={{ backgroundImage: `url(${bgUrl})` }}
                >
                    <div
                        className="quoteContent"
                        dangerouslySetInnerHTML={{
                            __html: formattedQuote.current,
                        }}
                    ></div>
                    <p className="slogn">“Quote generated by Hacker Pot</p>
                </div>
                <div className="arrows">
                    <span
                        className="material-symbols-outlined"
                        onClick={() => updateNum("left")}
                    >
                        arrow_back
                    </span>
                    <span
                        className="material-symbols-outlined"
                        onClick={() => updateNum("right")}
                    >
                        arrow_forward
                    </span>
                    <span
                        className="material-symbols-outlined"
                        onClick={onDownload}
                    >
                        download
                    </span>
                </div>
            </div>
            <div className="operatePane">
                <textarea
                    cols="30"
                    rows="10"
                    className="inputBox"
                    value={quote}
                    onChange={onQuoteChange}
                    placeholder="随便写点什么..."
                ></textarea>
            </div>
        </div>
    );
}
